version: '3.9'

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: prm_db
      POSTGRES_USER: prm_user
      POSTGRES_PASSWORD: prm_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - prm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prm_user -d prm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - prm_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - prm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=prm_backend.settings.development
      - DATABASE_URL=postgresql://prm_user:prm_password@db:5432/prm_db
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - ELASTICSEARCH_DSL_HOSTS=elasticsearch:9200
    networks:
      - prm_network
    restart: unless-stopped

  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A prm_backend worker -l info --concurrency=4
    volumes:
      - .:/code
      - media_volume:/code/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=prm_backend.settings.development
      - DATABASE_URL=postgresql://prm_user:prm_password@db:5432/prm_db
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - prm_network
    restart: unless-stopped

  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A prm_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/code
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=prm_backend.settings.development
      - DATABASE_URL=postgresql://prm_user:prm_password@db:5432/prm_db
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - prm_network
    restart: unless-stopped

  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A prm_backend flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - celery
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=prm_backend.settings.development
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - prm_network
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
    networks:
      - prm_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  static_volume:
  media_volume:

networks:
  prm_network:
    driver: bridge
